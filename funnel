#!/usr/bin/env python3.8

from datetime import datetime
import argparse
import os
import threading
import re
from aenum import Enum
from pprint import pprint
import random
import functools
import json

from SpotifyAuthenticator import application, CredentialIngestor
from SpotifyToolbox import HelperFunctions, PersonalStatistics
from FunnelCake import SpotifyHelper, PlaylistManager, SpotifyPlaylist, PlaylistGenerator, SpotifyUser

parser = argparse.ArgumentParser()

parser.add_argument("-a", "--authenticate", help="authenticate user", action="store_true")

parser.add_argument("--analyze-playlist", help="dump useful data about a playlist (artist, genre distribution)", action="store_true")

parser.add_argument("--batch-clone", help="apply functions to swathes of Spotify links", action="store_true")

parser.add_argument("--count", help="set length of action", type=int)

parser.add_argument("--config", help="configure the application with the application\' client id and client secret", action="store_true")

parser.add_argument("--clone", help="clone url given", type=str)

parser.add_argument("--delimiter", help="delimiter for separated lists", type=str)

parser.add_argument("--dry-run", help="do not modify playlist(s) during code execution", action="store_true")

parser.add_argument("--from-user", help="gather all playlists from a user (get's public by default only)", type=str)

parser.add_argument("-f", "--from-file", help="read Spotify playlist links from file", type=str)

parser.add_argument("--force-override", help="force actions to happen", action="store_true")

parser.add_argument("--from-list", help="read Spotify playlist links from delimited set of strings", type=str)

parser.add_argument("--merge", help="merge two or more playlists into one", action="store_true")

parser.add_argument("-o", "--output", help="give output a destination name", type=str)

parser.add_argument("--personal-stats", help="dump user statistics like Spotify does", action="store_true")

parser.add_argument("--remove-non-explicit", help="remove all not explicit tracks", action="store_true")

parser.add_argument("--remove-explicit", help="remove all explicit tracks", action="store_true")

parser.add_argument("--remove-live", help="remove all live tracks", action="store_true")

parser.add_argument("--random-playlist", help="generate a random playlist", action="store_true")

arguments = parser.parse_args()

creds, manager, generator = None, None, None
path = "credentials.json"
container = []
_re = re.compile("https://open\.spotify\.com/?(/user\/(?P<user>[a-zA-Z0-9]+)/)?playlist/(?P<id>[a-zA-Z0-9]+)")

if(arguments.config):
    client_id, client_secret = input("[+] Client ID: "), input("[+] Client secret: ")
    configuration = {
        "client_id": client_id,
        "client_secret": client_secret
    }
    # This is not meant to be secure. use a database instead
    with open("configuration.json", "w") as f:
        f.write(json.dumps(configuration))

"""
ensure that the user is authenticated
"""
if(arguments.authenticate):
    HelperFunctions.authenticate(application.run)
else:
    if(os.path.exists(path)):
        print("[+] Checking if the credentials are valid...")
        creds = CredentialIngestor.CredentialIngestor(path)
        if(not creds.is_expired(datetime.now())):
            print("[-] No need to authenticate")
            manager = PlaylistManager.PlaylistManager(creds.get_user_id(), creds.get_credential_hash())
            generator = PlaylistGenerator.PlaylistGenerator(manager)
        else:
            print('[ERROR] Please authenticate before proceeding; "funnel --authenticate"')
            quit()
    else:
        print('[ERROR] Please authenticate before proceeding; "funnel --authenticate"')
        quit()


"""
various functions that can be used
"""

if(arguments.dry_run):
    # TODO : implement
    print("[WARNING] Dry run activated, all actions here will not be permanent (NOT CURRENTLY IMPLEMENTED!)")

if(arguments.dry_run and arguments.force_override):
    print("[ERROR] Conflicting arguments --dry-run and --force-removal, cowardly refusing")
    quit()

# PERSONAL STATS

if(arguments.personal_stats):
    PersonalStatistics.personal_statistics()
    quit()

# PROCESSING INPUT

if(arguments.from_list):
    if(not arguments.delimiter):
        print("[WARNING] Please use a delimiter such as \'|\' or ',' for string lists, defaulting to ',' (comma)")
        arguments.delimiter = ","
    container = arguments.from_list.split(arguments.delimiter)

if(arguments.from_file):
    if not(os.path.exists(arguments.from_file)):
        print(f'[ERROR] File specified at {arguments.from_file} does not exist, cowardly refusing')
    else:
        with open(arguments.from_file) as f:
            container = [x.strip() for x in f.readlines()]

if(arguments.clone):
    container.append(arguments.clone)

if(arguments.from_user and arguments.batch_clone):
    _from_user_re = re.compile("(https://open\.spotify\.com/user/(?P<ID>\w+)(\?si\=[a-zA-Z0-9]+)?)+\,?")
    for m in _from_user_re.finditer(arguments.from_user):
        user = SpotifyUser.SpotifyUser(manager, f'https://open.spotify.com/user/{m.group("ID")}')
        playlists = user.obtain_playlists()
        user.clone_from_dump(playlists, m.group("ID")) # this is a bit meta because the manager being passed is the manager we generated from our credentials, therefore we can act like we own these playlists before they even make it on our account



"""
since we've made string list and file contents indistinguishable from each other, we can apply
the same functions on them
"""

# CLONE

if(container and (arguments.clone or arguments.batch_clone)):
    for entity in container:
        match = _re.finditer(entity)
        for m in match:
            user, id_ = m.group("user"), m.group("id")
        url = f'https://open.spotify.com/playlist/{user}'

        if not(match):
            print(f'[ERROR] URL {entity} does not conform to regex, it will not be processed')
        else:
            print(f'[+] Cloning {url}')
            if not(arguments.dry_run):
                SpotifyHelper.clone(manager, url, arguments.force_override, arguments.output)

# MERGE

if(container and (arguments.merge)):
    SpotifyHelper.merge(container, manager, arguments.output)

# REMOVE ON CRITERIA

if(container and (arguments.remove_live or arguments.remove_explicit or arguments.remove_non_explicit)):
    for playlist in container:
        p = SpotifyPlaylist.SpotifyPlaylist.from_url(manager, playlist)
        if(arguments.remove_explicit):
            p.remove_explicits()
        if(arguments.remove_non_explicit):
            p.remove_non_explicits()
        if(arguments.remove_live):
            p.remove_live_tracks()

# RANDOM PLAYLIST


if(arguments.random_playlist and arguments.from_list):
    _re = re.compile("(?P<action>(artist|genre))\:(?P<list>([a-zA-Z]+\s*,?)+)")
    match = _re.match(arguments.from_list)
    action, content =  None, None
    if(match):
        action, content = match.group("action"), set(match.group("list").split(','))
    else:
        print('[ERROR] Please ensure you use the preapproved actions [artist, genre, song] and provide a comma separated list. Example: "artist:Metallica,Flux Pavillion"')
        quit()
    if(action == "artist"):
        generator.random_artist_playlist(content, arguments.count, arguments.output)
    if(action == "genre"):
        generator.random_genre_playlist(content, len(content), arguments.count, arguments.output)

# ANALYZE

if(arguments.analyze_playlist and container):
    for element in container:
        playlist = SpotifyPlaylist.SpotifyPlaylist.from_url(manager, element)
        print(f'[INFO] Analyzing {playlist.name}')
        pprint(SpotifyHelper.analyze(playlist, manager))
